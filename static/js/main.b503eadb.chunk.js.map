{"version":3,"sources":["components/Header.js","components/Body.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","externalLinks","link","label","Body","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","totalVisits","sessionIds","metricsById","reverseOrder","json","username","password","authMessage","data","visitWeek","visitMonth","vWidth","bind","assertThisInitialized","renderEvents","renderMetricsCards","setState","window","innerWidth","fetchSessionIds","_this2","fetch","then","res","length","catch","err","console","log","id","_this3","obj","events","reverse","_this4","map","item","index","Card","bg","style","width","key","height","padding","Accordion","Toggle","as","Button","variant","eventKey","toString","onClick","fetchMetricsForId","session_id","Badge","event_count","moment","ts","utcOffset","format","Collapse","ListGroup","newDate","eventArray","event_type","split","eventType","eventTarget","Item","href","rel","target","es","margin","bottom","xType","tickLabelAngle","_this5","Tabs","defaultActiveKey","Tab","title","renderReverseButton","renderRefreshButton","Title","renderChart","renderVisitsByMonth","renderVisitsByWeek","renderLinks","App","components_Header","components_Body","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b503eadb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../App.css';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"header-content\">\r\n        <h1>Site Metrics</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { Accordion, Card, ListGroup, Button, Form, Tabs, Tab, Badge } from 'react-bootstrap';\r\nimport moment from 'moment';\r\nimport { XYPlot, VerticalBarSeries, VerticalGridLines, HorizontalGridLines,\r\n  YAxis, XAxis, LineMarkSeries } from 'react-vis';\r\nimport '../App.css';\r\n\r\nconst externalLinks = [\r\n  {\r\n    link: 'https://kevinchoi.dev',\r\n    label: 'Site'\r\n  },\r\n  {\r\n    link: 'https://github.com/Kevin0115/metrics',\r\n    label: 'Github'\r\n  },\r\n  {\r\n    link: 'https://customer.elephantsql.com/instance',\r\n    label: 'Database'\r\n  }\r\n];\r\n\r\nclass Body extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // NEW\r\n      totalVisits: 0,\r\n      sessionIds: [],\r\n      metricsById: {},\r\n      reverseOrder: false,\r\n\r\n      // OLD\r\n      json: null,\r\n      username: '',\r\n      password: '',\r\n      authMessage: '',\r\n      data: [],\r\n      visitWeek: [],\r\n      visitMonth: [],\r\n      vWidth: 0,\r\n    }\r\n    this.reverseOrder = this.reverseOrder.bind(this);\r\n    this.renderEvents = this.renderEvents.bind(this);\r\n    this.renderMetricsCards = this.renderMetricsCards.bind(this);\r\n\r\n    // Auth stuff\r\n    // this.handlePasswordChange = this.handlePasswordChange.bind(this);\r\n    // this.handleUsernameChange = this.handleUsernameChange.bind(this);\r\n    // this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({vWidth: window.innerWidth});\r\n    this.fetchSessionIds();\r\n  }\r\n\r\n  fetchSessionIds() {\r\n    fetch('https://ec2.kevnchoi.com/metric')\r\n    // fetch('http://localhost:8080/metric')\r\n    .then(res => res.json())\r\n    .then(json => {\r\n      this.setState({\r\n        sessionIds: json,\r\n        totalVisits: json.length,\r\n        metricsById: {}\r\n      });\r\n    })\r\n    // .then(() => this.processMetrics())\r\n    .catch(err => console.log('Error: ' + err));\r\n  }\r\n\r\n  fetchMetricsForId(id) {\r\n    // 'Caching' for this session\r\n    if (id in this.state.metricsById) {\r\n      return;\r\n    }\r\n    fetch('https://ec2.kevnchoi.com/metric/' + id)\r\n    // fetch('http://localhost:8080/metric/' + id)\r\n    .then(res => res.json())\r\n    .then(json => {\r\n      // Make K-V pair\r\n      const obj = {\r\n        events: json\r\n      };\r\n      // Get current state\r\n      const { metricsById } = this.state;\r\n      metricsById[id] = obj;\r\n      this.setState({\r\n        metricsById: metricsById\r\n      });\r\n    })\r\n    // .then(() => this.processMetrics())\r\n    .catch(err => console.log('Error: ' + err));\r\n  }\r\n\r\n  // processMetrics() {\r\n  //   const { json } = this.state;\r\n\r\n  //   const data = [];\r\n  //   const visitWeek = [];\r\n  //   const visitMonth = [];\r\n\r\n  //   for (let i = 0; i < json.length; i++) {\r\n\r\n  //     const currWeek = moment(json[i].events[0].timestamp).format(\"W/YY\");\r\n  //     const currMonth = moment(json[i].events[0].timestamp).format(\"M/YY\");\r\n  //     this.insertVisitTime(visitWeek, currWeek);\r\n  //     this.insertVisitTime(visitMonth, currMonth);\r\n\r\n  //     const events = json[i].events;\r\n  //     for (let j = 0; j < events.length; j++) {\r\n  //       const eventType = events[j].eventType;\r\n  //       const eventName = eventType.substring(eventType.indexOf('=') + 1);\r\n  //       this.insertEvent(data, eventName);\r\n  //     }\r\n  //   }\r\n\r\n  //   data.sort((a, b) => b.y - a.y);\r\n  //   this.setState({\r\n  //     data: data,\r\n  //     visitWeek: visitWeek.reverse(),\r\n  //     visitMonth: visitMonth.reverse()\r\n  //   });\r\n  // }\r\n\r\n  // insertEvent(data, eventType) {\r\n  //   if (eventType === 'sessionStart') { return; }\r\n  //   if (data.length === 0) {\r\n  //     data.push({\r\n  //       x: eventType,\r\n  //       y: 1\r\n  //     })\r\n  //   } else {\r\n  //     for (let i = 0; i < data.length; i++) {\r\n  //       if (data[i].x === eventType) {\r\n  //         data[i].y = data[i].y + 1;\r\n  //         return;\r\n  //       }\r\n  //     }\r\n  //     data.push({\r\n  //       x: eventType,\r\n  //       y: 1\r\n  //     })\r\n  //   }\r\n  // }\r\n\r\n  // insertVisitTime(array, time) {\r\n  //   if (array.length === 0) {\r\n  //     array.push({\r\n  //       x: time,\r\n  //       y: 1\r\n  //     })\r\n  //   } else {\r\n  //     for (let i = 0; i < array.length; i++) {\r\n  //       if (array[i].x === time) {\r\n  //         array[i].y = array[i].y + 1;\r\n  //         return\r\n  //       }\r\n  //     }\r\n  //     array.push({\r\n  //       x: time,\r\n  //       y: 1\r\n  //     })\r\n  //   }\r\n  // }\r\n\r\n  reverseOrder() {\r\n    this.setState({\r\n      sessionIds: this.state.sessionIds.reverse(),\r\n      reverseOrder: !this.state.reverseOrder\r\n    });\r\n  }\r\n\r\n  renderReverseButton() {\r\n    return this.state.reverseOrder ?\r\n      ( <div>&#x21a5;</div> ) : ( <div>&#x21a7;</div> )\r\n  }\r\n\r\n  renderRefreshButton() {\r\n    return (\r\n      <div>&#8635;</div>\r\n    );\r\n  }\r\n\r\n  renderMetricsCards() {\r\n    if (!this.state.sessionIds) {\r\n      return null;\r\n    }\r\n    return this.state.sessionIds.map((item, index) => {\r\n      return (\r\n        <Card bg=\"light\" style={{ width: '60vw' }} key={index}>\r\n          <Card.Header className=\"header\" style={{ height: '36px', padding: '2px 4px' }}>\r\n            <Accordion.Toggle style={{ padding: '2px' }} as={Button} variant=\"link\" eventKey={index.toString()} onClick={() => this.fetchMetricsForId(item.session_id)}>\r\n              <Badge variant=\"primary\" className=\"event-count\">{item.event_count}</Badge>\r\n              {moment(item.ts).utcOffset(-8).format('MMM D, YYYY')}\r\n            </Accordion.Toggle>\r\n            <div className=\"session-id\">{item.session_id}</div>\r\n          </Card.Header>\r\n          <Accordion.Collapse eventKey={index.toString()}>\r\n            <ListGroup>{this.renderEvents(item.session_id)}</ListGroup>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      )\r\n    })\r\n  }\r\n\r\n  renderEvents(session_id) {\r\n    if (!this.state.metricsById[session_id]) {\r\n      return;\r\n    }\r\n    const { events } = this.state.metricsById[session_id];\r\n\r\n    return events.map((item, index) => {\r\n      const newDate = moment(item.ts).utcOffset(-8).format(\"YYYY-MM-DD, h:mm A\");\r\n      const eventArray = item.event_type.split('=');\r\n      let eventType = '';\r\n      let eventTarget = '';\r\n      \r\n      switch(eventArray[0]) {\r\n        case 'sessionStart':\r\n          eventType = 'Started Session';\r\n          break;\r\n        case 'linkVisit':\r\n          eventType = 'Viewed ';\r\n          break;\r\n        case 'navTo':\r\n          eventType = 'Navigated to ';\r\n          break;\r\n        default:\r\n          eventType = 'Unknown Event';\r\n      }\r\n\r\n      if (eventArray[1]) {\r\n        eventTarget = eventArray[1];\r\n      }\r\n\r\n      return(\r\n        <ListGroup.Item key={index}>\r\n          <p className=\"event-desc\">{eventType + eventTarget}: {newDate}</p>\r\n        </ListGroup.Item> \r\n      );\r\n    })\r\n  }\r\n\r\n  renderLinks() {\r\n    return externalLinks.map((item, index) => {\r\n      return (\r\n        <a\r\n          key={index}\r\n          href={item.link}\r\n          rel=\"noopener noreferrer\"\r\n          target=\"_blank\"\r\n        >\r\n          <Button variant=\"outline-secondary\" className=\"link-item\">\r\n            {item.label}\r\n          </Button>\r\n        </a>\r\n      );\r\n    })\r\n  }\r\n\r\n  renderChart() {\r\n    if (!this.state.json) {\r\n      return null;\r\n    }\r\n    return (\r\n      <XYPlot margin={{bottom: 60}} xType=\"ordinal\" height={300} width={this.state.vWidth / 2}>\r\n        <VerticalGridLines />\r\n        <HorizontalGridLines />\r\n        <YAxis />\r\n        <XAxis tickLabelAngle={-50}/>\r\n        <VerticalBarSeries data={this.state.data} />\r\n      </XYPlot>\r\n    );\r\n  }\r\n\r\n  renderVisitsByMonth() {\r\n    if (!this.state.json) {\r\n      return null;\r\n    }\r\n    return (\r\n      <XYPlot margin={{bottom: 60}} xType=\"ordinal\" height={300} width={this.state.vWidth / 2}>\r\n        <VerticalGridLines />\r\n        <HorizontalGridLines />\r\n        <YAxis />\r\n        <XAxis />\r\n        <LineMarkSeries data={this.state.visitMonth} />\r\n      </XYPlot>\r\n    );\r\n  }\r\n\r\n  renderVisitsByWeek() {\r\n    if (!this.state.json) {\r\n      return null;\r\n    }\r\n    return (\r\n      <XYPlot margin={{bottom: 60}} xType=\"ordinal\" height={300} width={this.state.vWidth / 2}>\r\n        <VerticalGridLines />\r\n        <HorizontalGridLines />\r\n        <YAxis />\r\n        <XAxis tickLabelAngle={-50}/>\r\n        <LineMarkSeries data={this.state.visitWeek} />\r\n      </XYPlot>\r\n    );\r\n  }\r\n\r\n  // To make login persistent, use localStorage/sessionStorage\r\n  // handleSubmit(e) {\r\n  //   e.preventDefault();\r\n\r\n  //   const authObj = {\r\n  //     username: this.state.username,\r\n  //     password: this.state.password\r\n  //   }\r\n\r\n  //   fetch('https://ec2.kevnchoi.com/analytics/login', {\r\n  //     method: 'POST',\r\n  //     headers: {\r\n  //       'Content-Type': 'application/json'\r\n  //     },\r\n  //     body: JSON.stringify(authObj)\r\n  //   })\r\n  //   .then(res => res.json())\r\n  //   .then(res => {\r\n  //     if (res.status === 'Authenticated') {\r\n  //       this.setState({ authMessage: '' });\r\n  //       localStorage.setItem('auth', true);\r\n  //     } else {\r\n  //       this.setState({\r\n  //         authMessage: res.status\r\n  //       });\r\n  //     }\r\n  //   })\r\n  //   .catch(err => console.log('Error: ' + err));\r\n  // }\r\n\r\n  // handlePasswordChange(e) {\r\n  //   this.setState({password: e.target.value});\r\n  // }\r\n\r\n  // handleUsernameChange(e) {\r\n  //   this.setState({username: e.target.value});\r\n  // }\r\n\r\n  // renderAuth() {\r\n  //   return(\r\n  //     <Form onSubmit={this.handleSubmit}>\r\n  //       <Form.Group controlId=\"formBasicEmail\">\r\n  //         <Form.Control placeholder=\"Username\" onChange={this.handleUsernameChange}/>\r\n  //       </Form.Group>\r\n  //       <Form.Group controlId=\"formBasicPassword\">\r\n  //         <Form.Control type=\"password\" placeholder=\"Password\" onChange={this.handlePasswordChange}/>\r\n  //         <Form.Text className=\"text-muted\">\r\n  //           {this.state.authMessage}\r\n  //         </Form.Text>\r\n  //       </Form.Group>\r\n  //       <Button variant=\"outline-primary\" type=\"submit\">\r\n  //         Submit\r\n  //       </Button>\r\n  //     </Form>\r\n  //   );\r\n  // }\r\n    \r\n  render() {\r\n    // if (localStorage.getItem('auth')) {\r\n      return(\r\n        <div className=\"body-content\">\r\n          <Card>\r\n            <Card.Body>\r\n              <Tabs defaultActiveKey=\"events\">\r\n                <Tab eventKey=\"events\" title=\"Events\">\r\n                  <div className=\"event-list\">\r\n                    <h4 className=\"event-header\">\r\n                      <Badge variant=\"secondary\">\r\n                        Total Visits: {this.state.totalVisits}\r\n                      </Badge>\r\n                      <div className=\"reverse\">\r\n                        <Button\r\n                          variant=\"outline-primary\"\r\n                          style={{ height: 30, width: 30, padding: 0 }}\r\n                          onClick={() => this.reverseOrder()}\r\n                        >\r\n                          {this.renderReverseButton()}\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"outline-primary\"\r\n                          style={{ height: 30, width: 30, padding: 0 }}\r\n                          onClick={() => this.fetchSessionIds()}\r\n                        >\r\n                          {this.renderRefreshButton()}\r\n                        </Button>\r\n                      </div>\r\n                    </h4>\r\n                    <Accordion>\r\n                      {this.renderMetricsCards()}\r\n                    </Accordion>\r\n                  </div>\r\n                </Tab>\r\n                <Tab eventKey=\"charts\" title=\"Charts\">\r\n                  <div className=\"charts\">\r\n                    <Card.Title>\r\n                      Visits by Event Type\r\n                    </Card.Title>\r\n                    {this.renderChart()}\r\n                    <Card.Title>\r\n                      Visits by Month\r\n                    </Card.Title>\r\n                    {this.renderVisitsByMonth()}\r\n                    <Card.Title>\r\n                      Visits by Week\r\n                    </Card.Title>\r\n                    {this.renderVisitsByWeek()}\r\n                  </div>\r\n                </Tab>\r\n                <Tab eventKey=\"links\" title=\"Links\">\r\n                  <div className=\"links\">\r\n                    {this.renderLinks()}\r\n                  </div>\r\n                </Tab>\r\n              </Tabs>\r\n            </Card.Body>\r\n          </Card>\r\n        </div>\r\n      );\r\n    // } else {\r\n    //   return(\r\n    //     <div className=\"body-content\">\r\n    //       {this.renderAuth()}\r\n    //     </div>\r\n    //   );\r\n    // }\r\n  }\r\n}\r\n\r\nexport default Body;","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport Header from './components/Header';\r\nimport Body from './components/Body';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"app-container\">\r\n        <Header />\r\n        <Body />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}