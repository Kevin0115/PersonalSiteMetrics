{"version":3,"sources":["components/Header.js","components/Body.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","json","_this2","fetch","then","res","setState","catch","err","console","log","count","react_default","a","createElement","className","renderCount","Component","Body","auth","username","password","authRes","authMessage","handlePasswordChange","bind","assertThisInitialized","handleUsernameChange","handleSubmit","_this3","map","item","index","Card","bg","style","width","key","Accordion","Toggle","as","Button","variant","eventKey","toString","sessionId","Collapse","ListGroup","renderEvents","events","newDate","moment","timestamp","format","eventArray","eventType","split","eventTarget","Item","e","_this4","preventDefault","authObj","method","headers","Content-Type","body","JSON","stringify","status","target","value","Form","onSubmit","Group","controlId","Control","placeholder","onChange","type","Text","renderMetricsCards","renderAuth","App","components_Header","components_Body","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.54b0a29c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../App.css';\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      json: null\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://ec2.kevnchoi.com/analytics/count')\n    .then(res => res.json())\n    .then(res => this.setState({json: res}))\n    .catch(err => console.log('Error: ' + err));\n  }\n\n  renderCount() {\n    if (!this.state.json) {\n      return null;\n    }\n    return this.state.json.count;\n  }\n\n  render() {\n    return (\n      <div className=\"header-content\">\n        <h1>Site Metrics</h1>\n        <p className=\"count\">Total Site Visits: {this.renderCount()}</p>\n      </div>\n    );\n  }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { Accordion, Card, ListGroup, Button, Form } from 'react-bootstrap';\nimport moment from 'moment';\nimport '../App.css';\n\nclass Body extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      json: null,\n      auth: false,\n      username: '',\n      password: '',\n      authRes: null,\n      authMessage: '',\n    }\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    this.handleUsernameChange = this.handleUsernameChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('https://ec2.kevnchoi.com/analytics')\n    .then(res => res.json())\n    .then(res => this.setState({json: res}))\n    .catch(err => console.log('Error: ' + err));\n  }\n\n  renderMetricsCards() {\n    if (!this.state.json) {\n      return null;\n    }\n    return this.state.json.map((item, index) => {\n      return (\n        <Card bg=\"light\" style={{ width: '60vw' }} key={index}>\n          <Card.Header>\n            <Accordion.Toggle as={Button} variant=\"link\" eventKey={index.toString()}>\n              Session ID: {item.sessionId}\n            </Accordion.Toggle>\n          </Card.Header>\n          <Accordion.Collapse eventKey={index.toString()}>\n            <ListGroup>{this.renderEvents(item.events)}</ListGroup>\n          </Accordion.Collapse>\n        </Card>\n      )\n    })\n  }\n\n  renderEvents(events) {\n    return events.map((item, index) => {\n      const newDate = moment(item.timestamp).format(\"MMMM Do YYYY, h:mmA\");\n      const eventArray = item.eventType.split('=');\n      let eventType = '';\n      let eventTarget = '';\n      \n      switch(eventArray[0]) {\n        case 'sessionStart':\n          eventType = 'Started Session';\n          break;\n        case 'linkVisit':\n          eventType = 'Viewed ';\n          break;\n        case 'navTo':\n          eventType = 'Navigated to ';\n          break;\n        default:\n          eventType = 'Unknown Event';\n      }\n\n      if (eventArray[1]) {\n        eventTarget = eventArray[1];\n      }\n\n      return(\n        <ListGroup.Item key={index}>\n          <p className=\"event-desc\">{eventType + eventTarget}: {newDate}</p>\n        </ListGroup.Item> \n      );\n    })\n  }\n\n  // To make login persistent, use localStorage/sessionStorage\n  handleSubmit(e) {\n    e.preventDefault();\n\n    const authObj = {\n      username: this.state.username,\n      password: this.state.password\n    }\n\n    fetch('https://ec2.kevnchoi.com/analytics/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(authObj)\n    })\n    .then(res => res.json())\n    .then(res => {\n      if (res.status === 'Authenticated') {\n        this.setState({\n          auth: true,\n          authMessage: ''\n        });\n      } else {\n        this.setState({\n          authMessage: res.status\n        });\n      }\n    })\n    .catch(err => console.log('Error: ' + err));\n  }\n\n  handlePasswordChange(e) {\n    this.setState({password: e.target.value});\n  }\n\n  handleUsernameChange(e) {\n    this.setState({username: e.target.value});\n  }\n\n  renderAuth() {\n    return(\n      <Form onSubmit={this.handleSubmit}>\n        <Form.Group controlId=\"formBasicEmail\">\n          <Form.Control placeholder=\"Enter username\" onChange={this.handleUsernameChange}/>\n        </Form.Group>\n        <Form.Group controlId=\"formBasicPassword\">\n          <Form.Control type=\"password\" placeholder=\"Password\" onChange={this.handlePasswordChange}/>\n          <Form.Text className=\"text-muted\">\n            {this.state.authMessage}\n          </Form.Text>\n        </Form.Group>\n        <Button variant=\"outline-primary\" type=\"submit\">\n          Submit\n        </Button>\n      </Form>\n    );\n  }\n    \n  render() {\n    if (this.state.auth) {\n      return(\n        <div className=\"body-content\">\n          <Accordion>\n            {this.renderMetricsCards()}\n          </Accordion>\n        </div>\n      );\n    } else {\n      return(\n        <div className=\"body-content\">\n          {this.renderAuth()}\n        </div>\n      );\n    }\n  }\n}\n\nexport default Body;","import React, { Component } from 'react';\nimport './App.css';\n\nimport Header from './components/Header';\nimport Body from './components/Body';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app-container\">\n        <Header />\n        <Body />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}