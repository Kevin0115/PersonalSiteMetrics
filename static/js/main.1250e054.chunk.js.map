{"version":3,"sources":["components/Header.js","components/Body.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","Body","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","json","totalVisits","username","password","authMessage","data","vWidth","handlePasswordChange","bind","assertThisInitialized","handleUsernameChange","handleSubmit","_this2","setState","window","innerWidth","console","log","fetch","then","res","length","processMetrics","catch","err","i","events","j","eventType","eventName","substring","indexOf","insertEvent","sort","b","y","push","x","_this3","map","item","index","Card","bg","style","width","key","height","padding","Accordion","Toggle","as","Button","variant","eventKey","toString","moment","timestamp","format","sessionId","Collapse","ListGroup","renderEvents","es","margin","bottom","xType","tickLabelAngle","newDate","eventArray","split","eventTarget","Item","e","_this4","preventDefault","authObj","method","headers","Content-Type","body","JSON","stringify","status","localStorage","setItem","target","value","Form","onSubmit","Group","controlId","Control","placeholder","onChange","type","Text","getItem","Tabs","defaultActiveKey","Tab","title","Badge","renderMetricsCards","Title","renderChart","renderAuth","App","components_Header","components_Body","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1250e054.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../App.css';\n\nclass Header extends Component {\n  render() {\n    return (\n      <div className=\"header-content\">\n        <h1>Site Metrics</h1>\n      </div>\n    );\n  }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { Accordion, Card, ListGroup, Button, Form, Tabs, Tab, Alert, Badge } from 'react-bootstrap';\nimport moment from 'moment';\nimport { XYPlot, VerticalBarSeries, VerticalGridLines, HorizontalGridLines,\n  YAxis, XAxis } from 'react-vis';\nimport '../App.css';\n\nclass Body extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      json: null,\n      totalVisits: 0,\n      username: '',\n      password: '',\n      authMessage: '',\n      data: [],\n      vWidth: 0,\n    }\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    this.handleUsernameChange = this.handleUsernameChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({vWidth: window.innerWidth});\n    console.log(window.innerWidth);\n    fetch('https://ec2.kevnchoi.com/analytics')\n    .then(res => res.json())\n    .then(res => this.setState({ json: res, totalVisits: res.length }))\n    .then(() => this.processMetrics())\n    .catch(err => console.log('Error: ' + err));\n  }\n\n  processMetrics() {\n    const { json } = this.state;\n    const data = [];\n    for (let i = 0; i < json.length; i++) {\n      const events = json[i].events;\n      for (let j = 0; j < events.length; j++) {\n        const eventType = events[j].eventType;\n        const eventName = eventType.substring(eventType.indexOf('=') + 1);\n        this.insertEvent(data, eventName);\n      }\n    }\n    data.sort((a, b) => b.y - a.y);\n    this.setState({data: data});\n  }\n\n  insertEvent(data, eventType) {\n    if (eventType === 'sessionStart') { return; }\n    if (data.length === 0) {\n      data.push({\n        x: eventType,\n        y: 1\n      })\n    } else {\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].x === eventType) {\n          data[i].y = data[i].y + 1;\n          return;\n        }\n      }\n      data.push({\n        x: eventType,\n        y: 1\n      })\n    }\n  }\n\n  renderMetricsCards() {\n    if (!this.state.json) {\n      return null;\n    }\n    return this.state.json.map((item, index) => {\n      console.log(item.events[0]);\n      return (\n        <Card bg=\"light\" style={{ width: '60vw' }} key={index}>\n          <Card.Header className=\"header\" style={{ height: '36px', padding: '2px 4px' }}>\n            <Accordion.Toggle style={{ padding: '2px' }} as={Button} variant=\"link\" eventKey={index.toString()}>\n              {moment(item.events[0].timestamp).format(\"MM/DD/YY, h:mmA\")}\n            </Accordion.Toggle>\n            <div className=\"time\">{item.sessionId}</div>\n          </Card.Header>\n          <Accordion.Collapse eventKey={index.toString()}>\n            <ListGroup>{this.renderEvents(item.events)}</ListGroup>\n          </Accordion.Collapse>\n        </Card>\n      )\n    })\n  }\n\n  renderChart() {\n    if (!this.state.json) {\n      return null;\n    }\n    return (\n      <XYPlot margin={{bottom: 60}} xType=\"ordinal\" height={300} width={this.state.vWidth / 2}>\n        <VerticalGridLines />\n        <HorizontalGridLines />\n        <YAxis />\n        <XAxis tickLabelAngle={-50}/>\n        <VerticalBarSeries data={this.state.data} />\n      </XYPlot>\n    );\n  }\n\n  renderEvents(events) {\n    return events.map((item, index) => {\n      const newDate = moment(item.timestamp).format(\"MMMM Do YYYY, h:mmA\");\n      const eventArray = item.eventType.split('=');\n      let eventType = '';\n      let eventTarget = '';\n      \n      switch(eventArray[0]) {\n        case 'sessionStart':\n          eventType = 'Started Session';\n          break;\n        case 'linkVisit':\n          eventType = 'Viewed ';\n          break;\n        case 'navTo':\n          eventType = 'Navigated to ';\n          break;\n        default:\n          eventType = 'Unknown Event';\n      }\n\n      if (eventArray[1]) {\n        eventTarget = eventArray[1];\n      }\n\n      return(\n        <ListGroup.Item key={index}>\n          <p className=\"event-desc\">{eventType + eventTarget}: {newDate}</p>\n        </ListGroup.Item> \n      );\n    })\n  }\n\n  // To make login persistent, use localStorage/sessionStorage\n  handleSubmit(e) {\n    e.preventDefault();\n\n    const authObj = {\n      username: this.state.username,\n      password: this.state.password\n    }\n\n    fetch('https://ec2.kevnchoi.com/analytics/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(authObj)\n    })\n    .then(res => res.json())\n    .then(res => {\n      if (res.status === 'Authenticated') {\n        this.setState({ authMessage: '' });\n        localStorage.setItem('auth', true);\n      } else {\n        this.setState({\n          authMessage: res.status\n        });\n      }\n    })\n    .catch(err => console.log('Error: ' + err));\n  }\n\n  handlePasswordChange(e) {\n    this.setState({password: e.target.value});\n  }\n\n  handleUsernameChange(e) {\n    this.setState({username: e.target.value});\n  }\n\n  renderAuth() {\n    return(\n      <Form onSubmit={this.handleSubmit}>\n        <Form.Group controlId=\"formBasicEmail\">\n          <Form.Control placeholder=\"Username\" onChange={this.handleUsernameChange}/>\n        </Form.Group>\n        <Form.Group controlId=\"formBasicPassword\">\n          <Form.Control type=\"password\" placeholder=\"Password\" onChange={this.handlePasswordChange}/>\n          <Form.Text className=\"text-muted\">\n            {this.state.authMessage}\n          </Form.Text>\n        </Form.Group>\n        <Button variant=\"outline-primary\" type=\"submit\">\n          Submit\n        </Button>\n      </Form>\n    );\n  }\n    \n  render() {\n    if (localStorage.getItem('auth')) {\n      return(\n        <div className=\"body-content\">\n          <Card>\n            <Card.Body>\n              <Tabs defaultActiveKey=\"events\">\n                <Tab eventKey=\"events\" title=\"Events\">\n                  <div className=\"accordion\">\n                    <h4>\n                      <Badge variant=\"secondary\">\n                        Total Visits: {this.state.totalVisits}\n                      </Badge>\n                    </h4>\n                    <Accordion>\n                      {this.renderMetricsCards()}\n                    </Accordion>\n                  </div>\n                </Tab>\n                <Tab eventKey=\"charts\" title=\"Charts\">\n                  <div className=\"charts\">\n                    <Card.Title>\n                      Visits by Event Type\n                    </Card.Title>\n                    {this.renderChart()}\n                  </div>\n                </Tab>\n              </Tabs>\n            </Card.Body>\n          </Card>\n        </div>\n      );\n    } else {\n      return(\n        <div className=\"body-content\">\n          {this.renderAuth()}\n        </div>\n      );\n    }\n  }\n}\n\nexport default Body;","import React, { Component } from 'react';\nimport './App.css';\n\nimport Header from './components/Header';\nimport Body from './components/Body';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app-container\">\n        <Header />\n        <Body />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}